syntax = "proto2";
package hw.trezor.messages.hycon;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageHycon";

/**
 * Request: Ask device for Hycon address corresponding to address_n path
 * @start
 * @next HyconAddress
 * @next Failure
 */
message HyconGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node 44'/1397'/0'/0'/index'
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains an Hycon address derived from device private seed
 * @end
 */
message HyconAddress {
    required string address = 1;     // Hycon address
}

/**
 * Request: Ask device to sign transaction
 * All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
 * Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
 * @start
 * @next HyconTxRequest
 * @next Failure
 */
message HyconSignTx {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bytes to = 2;                  // To address
    optional uint64 amount = 3;				// amount for the transaction
    optional uint64 fee = 4;				// fee (in drops) for the transaction
    optional uint32 nonce = 5;          // BIP-32 path to derive the key from master node
}

/**
 * Response: signature for transaction
 * @end
 */
 message HyconSignedTx {
	optional string signature = 1;
	optional uint32 recovery = 2;
}
